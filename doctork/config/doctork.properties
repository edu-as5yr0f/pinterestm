# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

###################################################################################
#                                                                                 #
#  DoctorK global settings, including the zookeeper url for kafkastats topic  #
#                                                                                 #
###################################################################################
# [required] zookeeper quorum for storing doctork metadata
doctork.zkurl=zookeeper001:2181,zookeeper002:2181,zookeeper003:2181

# [required] zookeeper connection string for `kafkastats` topic
doctork.brokerstats.zkurl=zookeeper001:2181,zookeeper002:2181,zookeeper003:2181/cluster1
# [required] kafka topic name for kafkastats
doctork.brokerstats.topic=brokerstats
# [required] the time window that doctork uses to compute
doctork.brokerstats.backtrack.seconds=86400
# [optional] ssl related setting for the kafka cluster that hosts brokerstats
# can PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL
doctork.brokerstats.consumer.security.protocol=SSL
doctork.brokerstats.consumer.ssl.client.auth=required
doctork.brokerstats.consumer.ssl.enabled.protocols=TLSv1.2,TLSv1.1,TLSv1
doctork.brokerstats.consumer.ssl.endpoint.identification.algorithm=HTTPS
doctork.brokerstats.consumer.ssl.key.password=key_password
doctork.brokerstats.consumer.ssl.keystore.location=keystore_path
doctork.brokerstats.consumer.ssl.keystore.password=keystore_password
doctork.brokerstats.consumer.ssl.keystore.type=JKS
doctork.brokerstats.consumer.ssl.secure.random.implementation=SHA1PRNG
doctork.brokerstats.consumer.ssl.truststore.location=truststore_path
doctork.brokerstats.consumer.ssl.truststore.password=truststore_password
doctork.brokerstats.consumer.ssl.truststore.type=JKS


# [required] zookeeper connection string for `action_report` topic
doctork.action.report.zkurl=zookeeper001:2181,zookeeper002:2181,zookeeper003:2181/cluster1
# [required] kafka topics for storing the actions that doctork takes.
doctork.action.report.topic=operator_report
# [optional] broker replacement interval in seconds
doctork.action.broker_replacement.interval.seconds=43200
# [optional] broker replacement script
doctork.action.broker_replacement.command="/usr/local/bin/ec2-replace-node.py -r "
# [optional] ssl related settings for action report producer
doctork.action.producer.security.protocol=SSL
doctork.action.producer.ssl.client.auth=required
doctork.action.producer.ssl.enabled.protocols=TLSv1.2,TLSv1.1,TLSv1
doctork.action.producer.ssl.endpoint.identification.algorithm=HTTPS
doctork.action.producer.ssl.key.password=key_password
doctork.action.producer.ssl.keystore.location=keystore_path
doctork.action.producer.ssl.keystore.password=keystore_password
doctork.action.producer.ssl.keystore.type=JKS
doctork.action.producer.ssl.secure.random.implementation=SHA1PRNG
doctork.action.producer.ssl.truststore.location=truststore_path
doctork.action.producer.ssl.truststore.password=truststore_password
doctork.action.producer.ssl.truststore.type=JKS


# [required] doctork web port
doctork.web.port=8080

# [optional] disable doctork service restart
doctork.restart.disabled=false

# [required] doctork service restart interval
doctork.restart.interval.seconds=86400

# [optional] ostrich port #
doctork.ostrich.port=2052

# [optional] tsd host and port.
doctork.tsd.hostport=localhost:18621

# [required] email addresses for sending general notification on cluster under-replication etc.
doctork.emails.notification=email_address_1,email_address_2

# [required] email addresses for sending alerts to
doctork.emails.alert=email_address_3,email_address_4

# [optional] brokerstats.version
doctork.brokerstats.version=0.2.4.10


################################################################################
#                                                                              #
#  Settings for managed kafka clusters.                                        #
#                                                                              #
################################################################################

# cluster1 settings

# [required] whether DoctorKakfa runs in the dry run mode.
kafkacluster.cluster1.dryrun=true

# [required] zookeeper url for the kafka cluster
kafkacluster.cluster1.zkurl=zookeeper001:2181,zookeeper002:2181,zookeeper003:2181/cluster1

# [required] the network-inbound limit in megabytes
kafkacluster.cluster1.network.inbound.limit.mb=35

# [required] the network-outbound limit in megabytes
kafkacluster.cluster1.network.outbound.limit.mb=80

# [required] the broker's maximum network bandwidth
kafkacluster.cluster1.network.bandwith.max.mb=150

# [optional] ssl related kafka consumer setting for accessing topic metadata info of cluster1
kafkacluster.cluster1.consumer.security.protocol=SSL
kafkacluster.cluster1.consumer.ssl.client.auth=required
kafkacluster.cluster1.consumer.ssl.enabled.protocols=TLSv1.2,TLSv1.1,TLSv1
kafkacluster.cluster1.consumer.ssl.endpoint.identification.algorithm=HTTPS
kafkacluster.cluster1.consumer.ssl.key.password=key_password
kafkacluster.cluster1.consumer.ssl.keystore.location=keystore_path
kafkacluster.cluster1.consumer.ssl.keystore.password=keystore_password
kafkacluster.cluster1.consumer.ssl.keystore.type=JKS
kafkacluster.cluster1.consumer.ssl.secure.random.implementation=SHA1PRNG
kafkacluster.cluster1.consumer.ssl.truststore.location=truststore_path
kafkacluster.cluster1.consumer.ssl.truststore.password=truststore_password
kafkacluster.cluster1.consumer.ssl.truststore.type=JKS


# cluster2 settings
kafkacluster.cluster2.dryrun=true
kafkacluster.cluster2.zkurl=zookeeper001:2181,zookeeper002:2181,zookeeper003:2181/cluster2
kafkacluster.cluster2.network.inbound.limit.mb=35
kafkacluster.cluster2.network.outbound.limit.mb=80
kafkacluster.cluster2.network.bandwith.max.mb=150
kafkacluster.cluster2.check_interval_in_seconds=5
kafkacluster.cluster2.deadbroker_replacement.enable=true
kafkacluster.cluster2.deadbroker_replacement.no_stats.seconds=1200
kafkacluster.cluster2.notification.email=example@email.com
kafkacluster.cluster2.notificatino.pager=pager@pageremail.com
